---
title: "FutureTech Sales Acceleration Analytics Case"
format:
  dashboard:
    orientation: columns
    nav-buttons: [github]
    github: https://github.com/pmmagusiak/az_futuretech_case
    logo: images/logo.png
    theme: lux
server: shiny
---

```{r}
#| label: load-packages
#| context: setup
#| message: false

library(tidyverse)
library(skimr)
library(gt)
library(bslib)
library(ggimage)
library(DT)
library(shiny)
```

```{r}
#| label: load-data
#| context: setup
#| message: false

# Importing files into R environment

outreaches <- read_csv("data/contact_summary.csv")

sales <- read_csv("data/sales_summary.csv")
```

```{r}
#| label: initial-prep-data
#| context: setup
#| include: false
#| message: false

## Focusing on outreaches database

skim_without_charts(outreaches) 
outreaches |> filter(if_any(everything(), is.null)) # Using skimr package to summary data tables and overview missing values, duplicates and other information

outreaches |> filter(if_any(everything(), is.null)) # Checking if there are any rows with null values, as skimr does not assess that

outreaches |> 
  count(shop, date) |> 
  filter(n > 1) # There were cases of more than 1 contact per day

outreaches_processed <- outreaches |>
  arrange(date) |> 
  group_by(shop, Product) |> 
  mutate(first_contact = min(date), contact_window_start = date, contact_window_end = lead(date) - days(1)) |> # As there are sales that took place before first contact, a first contact column may prove useful
  mutate(contact_window_end = case_when(is.na(contact_window_end) ~ today(), TRUE ~ contact_window_end)) |> 
  ungroup() |> 
  group_by(shop, trigger) |>  
  mutate(total_contacts_per_shop_per_trigger = n()) |> 
  ungroup() |> 
  group_by(shop) |> 
  mutate(total_contacts_per_shop = n())

## Focusing on sales database, initial procedures the same as above

skim_without_charts(sales) 

sales |> filter(if_any(everything(), is.null))

## Joining 

sales_before_first_contact <- sales |> 
  inner_join(outreaches_processed, join_by(shop, Product), suffix = c("_of_sell", "_of_previous_contact"), relationship = "many-to-many") |> 
  group_by(shop, Product) |> 
  filter(date_of_sell < first_contact & contact_window_start == first_contact) |> 
  mutate(date_of_previous_contact = NA_Date_, contact_window_start = NA_Date_, contact_window_end = NA_Date_, trigger = "Sales before first contact") |>
  distinct() # There were 402 cases of items sold before first contact. I changed trigger label for the sake of future plot. 6 rows were duplicated, that is why I use distinct()

sales_within_contact_window <- sales |> 
  inner_join(outreaches_processed, join_by(shop, Product), suffix = c("_of_sell", "_of_previous_contact"), relationship = "many-to-many") |> 
  group_by(shop, Product) |> 
  filter(date_of_sell >= contact_window_start & date_of_sell <= contact_window_end)  # Joining variables are shop and product, as there are the same amount of n_unique shop ids and product names in both dbases and shops are in center of my analysis; join type does not matter right now because of many-to-many relationship

trigger_levels <- c("Regular Check-In", "Other", "Engagement Booster", "Sales before first contact")

futuretech <- sales_within_contact_window |> 
  bind_rows(sales_before_first_contact) |>
  select(shop, location, product = Product, date_of_sell, units_sold, date_of_previous_contact, first_contact, trigger, total_contacts_per_shop_per_trigger, total_contacts_per_shop) |> 
  mutate(product = factor(product), trigger = factor(trigger, levels = trigger_levels)) |> 
  mutate(image_url = case_when(product == "Badge of Courage" ~ "images/badge_of_courage.png", product == "Boots of Levitation" ~ "images/boots_of_levitation .png", product == "Cape of Velocity" ~ "images/cape_of_velocity.png", product == "Cloak of the Undead King" ~ "images/cloak_of_the_undead_king.png", product == "Elixir of Life" ~ "images/elixir_of_life.png", TRUE ~ "images/lions_shield_of_courage.png")) # Final database after wrangling, column tidying and adding images url

# My final database has about 60 observations less than raw database because it does not contain information about outreaches that took place after the last sell.
```


```{r}
#| label: further-data-analysis
#| context: setup
#| include: false
#| message: false

futuretech |> 
  distinct(shop, total_contacts_per_shop) |>
  group_by(total_contacts_per_shop) |> 
  summarize(count_of_shops_with_that_many_contacts = sum(n())) |> 
  arrange(desc(count_of_shops_with_that_many_contacts)) |> 
  print(n = 25) # Distribution of total contacts count, based on this I can create additional categorical label

quintile_breaks <- quantile(
  futuretech$total_contacts_per_shop,
  probs = seq(0, 1, 0.2),
  na.rm = TRUE # Creating quintiles
)

contact_quintiles <- futuretech |> 
  group_by(shop) |> 
  summarize(total = first(total_contacts_per_shop), .groups = "drop") |> 
  mutate(total_contacts_amount = cut(
    total,
    breaks = quintile_breaks,
    include.lowest = TRUE,
    labels = c("1 to 4", "5 to 8", "9 to 13", "14 to 20", "21 to 27")
  ))

contacts_amount_levels <- c("1 to 4", "5 to 8", "9 to 13", "14 to 20", "21 to 27")

futuretech_with_quintiles <- futuretech |> 
  left_join(contact_quintiles |> select(shop, total_contacts_amount), by = "shop") |> 
  mutate(total_contacts_amount = factor(total_contacts_amount, levels = contacts_amount_levels))

lowest_sales <- futuretech |> 
  group_by(shop) |> 
  filter(date_of_sell < "2020-06-22", sum(units_sold) == 1) # We know from the initial prep that shops sold units from 2014-10-12 to 2024-01-08, median is 2020-06-22, let's dive into a group of shops which sold product long ago. 
```

# Analysis

## Sidebar {.sidebar}

```{r}
sliderInput("sales_range", "Filter shops by sales volume:", min = 1, max = 46, value = c(1, 46))
```

## Column - Value boxes and plots {width=63%}

### Row - Value boxes {height=17%}

```{r}
value_box(
  title = "Average shop sells",
  value = textOutput("mean"),
  theme = "light"
)
```

```{r}
value_box(
  title = "Total products sold",
  value = textOutput("total"),
  theme = "light"
)
```

### Row - Plot - Mean shop-level sales by engagement approach {height=41% .tabset}

```{r}
#| title: Average sales by outreach method

plotOutput("campaign")
```

```{r}
#| title: How contact frequency affects sales?

plotOutput("contacts")
```

### Row - Plot - Lollipop {height=42%}

```{r}
#| title: Which products sell the most?

plotOutput("lollipop")
```

## Column - Plot and table {width=37%}

### Row - Plot - Distribution of products sold {height=50%}

```{r}
#| title: Distribution of products sold
#| fig-width: 10

mean_items_sold <- futuretech |>
  group_by(shop) |> 
  summarize(sum = sum(units_sold)) |> 
  pull(sum) |> 
  mean() 

futuretech |>
  group_by(shop) |> 
  summarize(shop_sales_total = sum(units_sold)) |> 
  ggplot(aes(shop_sales_total)) +
  geom_histogram(binwidth = 1) +
  geom_vline(
    aes(xintercept = mean(shop_sales_total)),
    color = "#F8766D",
    linetype = "dashed",
    linewidth = 1
  ) +
  labs(
    x = "Products sold",
    y = "Number of shops"
  ) +
  annotate(
    "text",
    x = mean_items_sold,
    y = Inf,
    label = paste("Mean =", round(mean_items_sold, 2)),
    vjust = 4,
    hjust = -0.1,
    color = "#F8766D"
  ) +
  theme_minimal() # Histogram of sales, very useful for choosing inputs on slider
```

### Row - Tabset of tables {height=50% .tabset}

```{r}
#| include: false
#| message: false

futuretech |> 
  count(shop, product)

n_distinct(futuretech$shop) # Those two lines of code prove that one shop bought only one type of product
```

```{r}
#| title: Top 20 sellers

futuretech |> 
  group_by(shop, product, location, total_contacts_per_shop) |> 
  summarize(shop_sales_total = sum(units_sold), .groups = "drop") |> 
  arrange(desc(shop_sales_total)) |>
  slice_head(n = 20) |>
  select(Shop = shop, Location = location, Product = product, Sold = shop_sales_total, Contacts = total_contacts_per_shop) |>
  gt() |> 
  cols_align(align = "left", columns = Product) 
```

```{r}
#| title: Bottom 20 sellers

futuretech |> 
  group_by(shop, product, location, total_contacts_per_shop) |> 
  summarize(shop_sales_total = sum(units_sold), .groups = "drop") |> 
  arrange(shop_sales_total) |>
  slice_head(n = 20) |>
  arrange(desc(total_contacts_per_shop)) |> 
  select(Shop = shop, Location = location, Product = product, Sold = shop_sales_total, Contacts = total_contacts_per_shop) |>
  gt() |> 
  cols_align(align = "left", columns = Product)
```

# Data

```{r}
futuretech |> 
  select(-c(first_contact, image_url, total_contacts_per_shop_per_trigger)) |> 
  datatable(colnames = c("date of sell" = "date_of_sell", "units sold" = "units_sold", "preceding contact type" = "trigger", "preceding contact date" = "date_of_previous_contact", "total contacts per shop" = "total_contacts_per_shop"))
```

```{r}
#| context: server

# Basic filtering logic

futuretech_filtered <- reactive({
  futuretech_with_quintiles |>
    group_by(shop) |> 
    filter(sum(units_sold) >= input$sales_range[1] & sum(units_sold) <= input$sales_range[2]) |> 
    ungroup()
})

# Value boxes code

average_shop_sales <- reactive({
  futuretech_filtered() |>
    group_by(shop) |> 
    summarize(sum = sum(units_sold)) |> 
    pull(sum) |> 
    mean()
})

output$mean <- renderText({
  round(average_shop_sales(), 2)
})

total_units_sold <- reactive({
  futuretech_filtered() |> 
    summarize(total = sum(units_sold)) |> 
    pull(total)
})

output$total <- renderText({
  total_units_sold()
})

# Code for an interactive lollipop plot

output$lollipop <- renderPlot({
  futuretech_filtered() |> 
  group_by(product) |>
  summarize(total_product_sold = sum(units_sold), image_url = first(image_url)) |> 
  ggplot(aes(x = reorder(product, total_product_sold, decreasing = TRUE)), y = total_product_sold) +
    geom_segment(aes(xend = product, y = 0, yend = total_product_sold), color = "gray", size = 2) +
    geom_image(aes(image = image_url, y = total_product_sold), size = .15) +
    scale_y_continuous(expand = expansion(mult = c(0, 0.15))) + # I am using this line so that my top image is fitting to plot
    ylab("Products sold") +
    labs(caption = "Note: Each shop sold only one type of product") +
    theme_light() +
    theme(axis.title.x = element_blank())
})

# Code for an interactive campaign effectiveness plot

output$campaign <- renderPlot({
  futuretech_filtered() |> 
  group_by(shop, trigger) |> 
  summarize(campaign_shop_sales = sum(units_sold), .groups = "drop") |> 
  group_by(trigger) |> 
  summarize(avg_campaign_shop_sales = mean(campaign_shop_sales), .groups = "drop") |> 
  ggplot(aes(x = reorder(trigger, avg_campaign_shop_sales), y = avg_campaign_shop_sales, fill = trigger)) +
  geom_col() +
    labs(y = "Products sold", fill = "Contacty type", caption = "Note: Averages are calculated at the shop level. Bar color indicates the type of preceding contact strategy") +
  scale_fill_manual(values = c("Regular Check-In" = "#ffc107" , "Other" = "#4caf50", "Engagement Booster" = "#9c27b0" , "Sales before first contact" = "#6c757d"), drop = FALSE) +
  theme_light() + 
  theme(
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +
  coord_flip()
})

# Code for an interactive contacts amount effectiveness plot

output$contacts <- renderPlot({
  futuretech_filtered() |> 
  group_by(shop, total_contacts_amount) |> 
  summarize(shop_sales_per_contact_amount = sum(units_sold), .groups = "drop") |> 
  group_by(total_contacts_amount) |> 
  summarize(avg_shop_sales_per_contact_amount = mean(shop_sales_per_contact_amount), .groups = "drop") |> 
  ggplot(aes(x = reorder(total_contacts_amount, avg_shop_sales_per_contact_amount), y = avg_shop_sales_per_contact_amount, fill = total_contacts_amount)) +
  geom_col() +
    labs(y = "Products sold", fill = "How many times a shop was contacted?", caption = "Note: Averages are calculated at the shop level") +
  scale_fill_manual(values = c("1 to 4" = "#2196f3", "5 to 8" = "#00bcd4", "9 to 13" = "#4caf50", "14 to 20" = "#9c27b0", "21 to 27" = "#ffc107"), drop = FALSE) +
  theme_light() + 
  theme(
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +
  coord_flip()
})
```

```{r}
#| label: stupid-code-cemetery

# sales_processed <- sales |>
#   group_by(shop, Product, date) |> 
#   ungroup() |> 
#   arrange(date) |> 
#   group_by(shop, Product) |> 
#   mutate(sales_window_start = lag(date) + days(1), sales_window_end = date, first_sale = min(date)) |> 
#   mutate(sales_window_start = case_when(is.na(sales_window_start) ~ as.Date("2014-01-01"), TRUE ~ sales_window_start)) # had to do this 2014 to join without filtering out

# sales_before_first_contact1 <- sales_processed |> 
#   inner_join(outreaches_processed |> group_by(shop, Product) |> 
#       summarize(first_contact = min(date), .groups = "drop"),
#     join_by(shop, Product)) |> 
#   group_by(shop, Product) |> 
#   filter(date < first_contact) |> 
#   mutate(trigger = "Sales before first manufacturer contact") |> 
#   rename(date_of_sell = date)

# sales_within_contact_window1 <- sales_processed |> 
#   inner_join(outreaches_processed, join_by(shop, Product), suffix = c("_of_sell", "_of_contact"), relationship = "many-to-many") |> 
#   group_by(shop, Product) |> 
#   filter(date_of_contact > sales_window_start & date_of_contact < sales_window_end)

# sales_within_contact_window_final <- bind_rows(sales_within_contact_window, sales_within_contact_window1) |> distinct()

# finaldb <- sales_within_contact_window_final |>
#   group_by(shop, trigger) |>
#   mutate(total_contacts_per_shop_per_trigger = n_distinct(date_of_contact)) |>
#   mutate(total_contacts_per_shop_per_trigger = case_when(shop == "SSID_704509" ~ total_contacts_per_shop_per_trigger + 2, shop == "SSID_307863" ~ total_contacts_per_shop_per_trigger + 1, shop == "SSID_710792" total_contacts_per_shop_per_trigger + 1, shop == "SSID_850572" & trigger == "Regular Check-In" ~ total_contacts_per_shop_per_trigger + 1, TRUE ~ total_contacts_per_shop_per_trigger)) |>
#   ungroup() |>
#   group_by(shop) |>
#   mutate(total_contacts = n_distinct(date_of_contact)) |>
#   mutate(total_contacts = case_when(shop == "SSID_704509" ~ total_contacts + 2, shop == "SSID_307863" ~ total_contacts + 1, shop == "SSID_710792" ~ total_contacts + 1, shop == "SSID_850572" ~ total_contacts + 1, TRUE ~ total_contacts))

# outreaches_old_stupid_version <- outreaches |>
#   group_by(shop, Product, date) |>
#   mutate(contacts_on_that_day = n()) |> # Column with a number of contacts per date
#   ungroup() |>
#   arrange(date) |>
#   group_by(shop, Product) |>
#   mutate(first_contact = min(date), contact_window_start = date, contact_window_end = lead(date) - days(1)) |> # As there are sales that took place before first contact, a first contact column may prove useful
#   mutate(contact_window_end = case_when(is.na(contact_window_end) ~ today(), TRUE ~ contact_window_end)) |>
#   ungroup() |>
#   group_by(shop, trigger) |>
#   mutate(total_contacts_per_shop_per_trigger = n_distinct(date)) |>
#   mutate(total_contacts_per_shop_per_trigger = case_when(shop == "SSID_704509" & trigger == "Other" ~ total_contacts_per_shop_per_trigger + 2, shop == "SSID_307863" & trigger == "Other" ~ total_contacts_per_shop_per_trigger + 2, shop == "SSID_710792" ~ total_contacts_per_shop_per_trigger + 1, shop == "SSID_850572" & trigger == "Regular Check-In" ~ total_contacts_per_shop_per_trigger + 1, TRUE ~ total_contacts_per_shop_per_trigger)) |>
#   ungroup() |>
#   group_by(shop) |>
#   mutate(total_contacts_per_shop = n_distinct(date)) |>
#   mutate(total_contacts_per_shop = case_when(shop == "SSID_704509" ~ total_contacts_per_shop + 2, shop == "SSID_307863" ~ total_contacts_per_shop + 2, shop == "SSID_710792" ~ total_contacts_per_shop + 1, shop == "SSID_850572" ~ total_contacts_per_shop + 1, TRUE ~ total_contacts_per_shop)) # A ton of manual labour (I couldn't find a way to do it more elegant way) to have a count of contacts with correction of multiple contacts per day
```

